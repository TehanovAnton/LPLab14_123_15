#pragma once
#define LEXEMA_FIXSIZE 1			// фиксированный размер лексемы
#define LT_MAXSIZE 4096				// максимальное количество строк в таблице лексем
#define LT_TILNULLIDX 0xffffffff	// нет элемента таблицы идентификаторов 
#define LEX_INTEGER 't'				// лексема для integer
#define LEX_STRING 't'				// лексема для string
#define LEX_ID	'i'					// лексема для идентификатороф
#define LEX_LITERAL 'l'				// лексема для литерала
#define LEX_FUNCTION 'f'			// лексема для function				
#define LEX_DECLARE 'd'				// лексема для declare					
#define LEX_RETURN 'r'				// лексема для return					
#define LEX_PRINT 'p'				// лексема для print						
#define LEX_SEMICOLON ';'			// лексема для ;						
#define LEX_COMMA ','				// лексема для ,							
#define LEX_LEFTBRACE '{'			// лексема для {						
#define LEX_BRACELET '}'			// лексема для }						
#define LEX_LEFTHESIS '('			// лексема для (						
#define LEX_RiGHTHESIS ')'			// лексема для )						
#define LEX_PLUS '+'				// лексема для +							
#define LEX_MINUS '-'				// лексема для -							
#define LEX_STAR '*'				// лексема для *							
#define LEX_DIRSLASH '/'			// лексема для /
#define LEX_EQUAl '='				// лексема для =
#define LEX_MAIN 'm'				// лекскема для main
#define LEX_LSQBRACKET '['
#define LEX_RSQBRACKET ']'

#include "IT.h"
#include "SpecialSym.h"
#include "Error.h"
#include<iostream>
#include<string>

bool isSymInStr(char sym, const char str[]);

namespace LT							// таблица лексем		
{
	struct Entry						// строка таблицы лексем
	{
		char lexema[LEXEMA_FIXSIZE + 1];	// лексема			
		int sn;							// номер строки в исходном тексте
		int idxTI;						// индекс в таблице идентификаторов или LТ_ТI_NULLIDX
		Entry();

		Entry(char shortLexm, int line, int idxTI);
	};

	struct Position						// структура хранит положение лекскемыв исходном тексте программы
	{
		unsigned int colone;
		unsigned int line;
		Position();
		Position(int cl, int ln);
	};

	struct LexTable						// экземпляр таблицы лексем
	{
		int maxsize;				    // ёмкость таблицы лексем < LT_MAXSIZE
		int size;						// текущий размер таблицы лексем < maxsize
		Entry* table;					// массив строк таблицы лексем
		int posSize;
		Position* positions;				// массив положений лексем

		void GetLexemsPosition(std::string  originalText);		// функция заполняет принемает текст исходной и заполняет массив положежний
		void PrintTable();										// вывод таблицы
	};

	LexTable Create(								// создать таблицу лексем
		int size						// ёмкость таблицы лексем < LT_MAXSIZE
	);

	void Add(										// добавить строку в таблицу лексем
		LexTable& lextable,					// экземпляр таблицы лексем
		Entry& entry							// строка таблицы лексем
	);

	Entry GetEntry(
		LexTable& lextable,				// экземпляр таблицы лексем
		int n							// номер получаемой строки
	);

	int IstdByID(LexTable lexTable, char value[]);

	void Delete(									// удалить таблицу лексем (освободить память)
		LexTable& lextable
	);
}